version: "3.9"

services:
  auth_db:
    container_name: auth-db
    image: postgres:16.0
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_db
    ports:
      - "5435:5432"   # Используем порт 5432 внутри контейнера для совместимости
    volumes:
      - ./back_beautyhub/auth-service:/docker-entrypoint-initdb.d
      - pg_auth:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    container_name: auth-service
    restart: always
    build: ./auth-service
    ports:
      - "8084:8084"
    depends_on:
      auth_db:
        condition: service_healthy
    environment:
      SERVER_PORT: "8084"
      JWT_SECRET: "b5f59337a612a2a7dc07328f3e7d1a04722967c7f06df20a499a7d3f91ff2a7e"
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_VK_CLIENTID: "52428023"
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_VK_CLIENTSECRET: "7Ol7NuJg5up6R5ggteKM"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://auth-db:5432/auth_db"   # Используем имя контейнера auth-db
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_PASSWORD: "postgres"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"   # Используется для автоматического обновления схемы базы данных
      SPRING_JPA_SHOW_SQL: "true"   # Для отображения SQL-запросов
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: "org.hibernate.dialect.PostgreSQLDialect"   # Диалект PostgreSQL
    networks:
      - app-network

  profile-service:
    container_name: profile-service
    build: ./profile-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://profiles_db:5432/profiles_db  # Исправлен порт
      - MINIO_PUBLIC_URL=http://minio:9000
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_CLIENT_PHOTOS=client-photos
      - MINIO_BUCKET_MASTER_WORKS=master-works
      - MINIO_BUCKET_CERTIFICATES=certificates
    ports:
      - "8080:8080"
    depends_on:
      profiles_db:
        condition: service_healthy  # Добавлена проверка здоровья
      file-storage:
        condition: service_healthy
    networks:
      - app-network

  profiles_db:
      image: postgres:15
      container_name: profiles_db  # Явное имя контейнера
      environment:
        POSTGRES_DB: profiles_db
        POSTGRES_PASSWORD: postgres
        POSTGRES_USER: postgres
      networks:
        - app-network
      volumes:
        - pgdata:/var/lib/postgresql/data
      ports:
        - "5433:5432"  # Исправлено: внешний 5433 → внутренний 5432
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U postgres -d profiles_db" ]  # Добавлено имя БД
        interval: 5s
        timeout: 5s
        retries: 5

  file-storage:
    image: minio/minio
    container_name: file-storage
    command: server /data --console-address ":9090"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9090:9090"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  pg_db:
  pg_auth:
  pgdata:
  minio_data:

networks:
  app-network:
    driver: bridge
